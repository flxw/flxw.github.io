<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>Felix Wolff</title>
  <subtitle>Super-fast Jekyll framework</subtitle>
  <updated>2022-12-07T21:17:38+01:00</updated>
  <id>https://flxw.de/</id>
  <generator uri="https://sparanoid.com/lab/amsf/" version="2.0.22">Almace Scaffolding</generator>

  <link rel="alternate" type="text/html" hreflang="en" href="https://flxw.de/" />
  <link rel="self" type="application/atom+xml" href="https://flxw.de/feed.xml" />

  <author>
    <name>Felix Wolff</name>
    <uri>https://flxw.de/</uri>
    <email>wolff.felix@proton.me</email>
  </author>

  
    
      

      

      <entry>
        <title>Kyverno and a custom Sigstore</title>
        <id>https://flxw.de/integrating-kyverno-with-a-private-sigstore-deployment.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/integrating-kyverno-with-a-private-sigstore-deployment.html" />
        <published>2022-12-06T00:00:00+01:00</published>

        
          <updated>2022-12-07T12:23:09+01:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;This is a follow-up post to my previous writing on &lt;a href=&quot;/standing-up-sigstore-locally.html&quot;&gt;standing up a local Sigstore deployment&lt;/a&gt;.
This post is quite technical and requires a firm understanding of how Sigstore and its components work.
See the &lt;a href=&quot;https://sigstore.dev&quot;&gt;Sigstore project page&lt;/a&gt; for pointers for diving into the subject.&lt;/p&gt;

&lt;p&gt;After deploying Sigstore and pushing signatures and provenance into it for a while, I tried
to make use of this data on a larger scale inside a Kubernetes cluster.
The goal was to verify signatures and provenance information of an image before actually running it.&lt;/p&gt;

&lt;p&gt;The Sigstore project offers &lt;a href=&quot;https://docs.sigstore.dev/policy-controller/overview&quot;&gt;policy-controller&lt;/a&gt; for that, but 
&lt;a href=&quot;https://kyverno.io&quot;&gt;Kyverno&lt;/a&gt; also implements &lt;a href=&quot;https://kyverno.io/docs/writing-policies/verify-images/&quot;&gt;signature verification&lt;/a&gt;.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kyverno&lt;/code&gt; is a very versatile policy manager, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;policy-controller&lt;/code&gt; is specific to Sigstore.
Nonetheless, both allow verifying container image signatures and related metadata before deploying an image,
acting as a &lt;a href=&quot;https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/&quot;&gt;Kubernetes admission controller&lt;/a&gt; in the process.&lt;/p&gt;

&lt;p&gt;In the following, I will demonstrate how to work around current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kyverno&lt;/code&gt; limitations and have it verify keyless signatures using self-hosted Sigstore components.&lt;/p&gt;

&lt;h1 id=&quot;recap-keyless-signatures&quot;&gt;Recap: Keyless signatures&lt;/h1&gt;
&lt;p&gt;Keyless signatures are arguably the most innovative feature of Sigstore.
It does away with the dangerous and error-prone management of local key pairs.
Instead, it leverages an identity provider to verify the signers’ identity
and embeds this identity into the artifact signing certificate.
After the signing act, the signing certificate gets thrown away, and the only remnant is the public key inside the Rekor entry.&lt;/p&gt;

&lt;h1 id=&quot;a-policy-for-public-sigstore&quot;&gt;A policy for public Sigstore&lt;/h1&gt;
&lt;p&gt;This section showcases an example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kyverno&lt;/code&gt; policy.
It validates signatures on any image that matches one of the regexes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imageReferences&lt;/code&gt;,
and requires them to be signed keyless by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some-email@protonmail.com&lt;/code&gt;, courtesy of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some-idp&lt;/code&gt;.
It will only log policy failures, as specified by the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;validationFailureAction&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kyverno.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterPolicy&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;check-container-signature&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;validationFailureAction&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;audit&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;check-container-signature&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;kinds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;verifyImages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;imageReferences&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ghcr.io/your/image*&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;attestors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;keyless&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;some-email@protonmail.com&quot;&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;issuer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;some-idp&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The execution of this policy will invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cosign&lt;/code&gt;, as demonstrated by this &lt;a href=&quot;https://github.com/kyverno/kyverno/blob/3a8affab1600f28e097b1cfa5c8c94b62df7e573/pkg/engine/imageVerify.go#L440&quot;&gt;code snippet&lt;/a&gt;.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cosign&lt;/code&gt; tool will then contact the public Sigstore deployment, and check the signatures contained inside the public Rekor instance.
This works beautifully.&lt;/p&gt;

&lt;p&gt;It works, because cosign is configured by default to speak to the public Sigstore deployment.
The verification requires having access to the correct set of public keys for Rekor, Fulcio and ctlog.
As we want to use the policy with a private Sigstore deployment, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cosign&lt;/code&gt; inside of Kyverno needs to be informed about these.&lt;/p&gt;

&lt;p&gt;Unfortunately, it is not yet possible to do this within Kyverno as the next section will show.&lt;/p&gt;

&lt;h1 id=&quot;problems-with-the-current-kyverno-implementation&quot;&gt;Problems with the current Kyverno implementation&lt;/h1&gt;
&lt;p&gt;As of Kyverno 1.8.2, the advanced options for verifying keyless signatures with a custom deployment are not documented and are hidden in the &lt;a href=&quot;https://github.com/kyverno/kyverno/blob/3a8affab1600f28e097b1cfa5c8c94b62df7e573/pkg/engine/imageVerify.go#L552-L562&quot;&gt;source code&lt;/a&gt;.
The code reveals that it is possible to point the policy to a specific Rekor instance and provide the public Fulcio key in PEM format.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# to be added as part of a `keyless` entry&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rekor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://url.to.your.rekor.com/make/sure/its/accessible&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;roots&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;PEM OF THE FULCIO ROOT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, this is only a third of the required number of public keys and certificates.
Trying out a policy with the options from above leads to a complaint about cosign not being able
to verify the signed certificate timestamps (SCT):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl run &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ghcr.io/flxw/example-image@sha256:cab1dab84c35c2f9382ece97b02a42903a3135e7c1b81d937798bde9bf3ef486

Error from server: admission webhook &lt;span class=&quot;s2&quot;&gt;&quot;mutate.kyverno.svc-fail&quot;&lt;/span&gt; denied the request: 

policy Pod/default/test &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;resource violation: 
check-container-signature:
  check-container-signature: |-
    failed to verify image ghcr.io/flxw/example-image@sha256:cab1dab84c35c2f9382ece97b02a42903a3135e7c1b81d937798bde9bf3ef486: .attestors[0].entries[0].keyless: no matching signatures:
    ctfe public key not found &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;embedded SCT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The SCTs are doled out by ctlog, and nowhere have we passed in its public key.
The same goes for the Rekor public key, which is required to verify the signature on the Rekor entry.
Failure should not be a surprise then.&lt;/p&gt;

&lt;p&gt;In the following, I will present a fix for this issue.&lt;/p&gt;

&lt;h1 id=&quot;a-policy-for-a-custom-sigstore&quot;&gt;A policy for a custom Sigstore&lt;/h1&gt;
&lt;p&gt;As demonstrated in the previous section, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cosign&lt;/code&gt; tool used by Kyverno requires all Fulcio, Rekor, and ctlog signing information to successfully work with non-standard Sigstore components.
Unfortunately, they can not be passed to the policy directly as of now.
This problem is also partially tracked in this &lt;a href=&quot;https://github.com/kyverno/kyverno/issues/5165&quot;&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thankfully, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cosign&lt;/code&gt; can be made to work with &lt;a href=&quot;https://docs.sigstore.dev/cosign/custom_components&quot;&gt;custom components&lt;/a&gt; via environment variables, aptly named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGSTORE_REKOR_PUBLIC_KEY&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGSTORE_CT_LOG_PUBLIC_KEY_FILE&lt;/code&gt;.
These variables contain file locations that the tool will retrieve the public keys from.
The files shall be mounted in the respective pods as files, created from a configmap:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
curl https://your-rekor.com/api/v1/log/publicKey &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; rekor-public-key.pem

kubectl get secret/ctlog-public-key &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; ctlog-system &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jsonpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;{.data.public}&apos;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ctlog-public-key.pem

kubectl create cm public-keys &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kyverno &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--from-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rekor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rekor-public-key.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--from-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ctlog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ctlog-public-key.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The environment variables need to be set on the pods where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cosign&lt;/code&gt; is executed - every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kyverno&lt;/code&gt; pod.
Unfortunately, this forces us to add the two environment variables to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kyverno&lt;/code&gt; deployment manually:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# add these to the kyverno deployment&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;configMap&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;public-keys&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;public-keys&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/public-keys&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;public-keys&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SIGSTORE_CT_LOG_PUBLIC_KEY_FILE&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/public-keys/ctlog&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SIGSTORE_REKOR_PUBLIC_KEY&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/public-keys/rekor&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, you are ready to debug and test whether the changes have the desired effect.
I recommend starting a container image and provoking a policy failure.
This will generate output in response to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl run&lt;/code&gt; command.
An example would be a signature by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wolff.felix@protonmail.com&lt;/code&gt; when the policy requires one by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wolff.peter@protonmail.com&lt;/code&gt;.
Here’s an example of the error message you would receive with an enforcing policy:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl run test --image=ghcr.io/flxw/example-image@sha256:cab1dab84c35c2f9382ece97b02a42903a3135e7c1b81d937798bde9bf3ef486
Error from server: admission webhook &quot;mutate.kyverno.svc-fail&quot; denied the request: 

policy Pod/default/test for resource violation: 

check-container-signature:
  check-container-signature: &apos;failed to verify image ghcr.io/flxw/example-image@sha256:cab1dab84c35c2f9382ece97b02a42903a3135e7c1b81d937798bde9bf3ef486:
    .attestors[0].entries[0].keyless: subject mismatch: expected wolff.peter@protonmail.com,
    received wolff.felix@protonmail.com&apos;
Error from server: admission webhook &quot;mutate.kyverno.svc-fail&quot; denied the request: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have received a similar error message, it means that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cosign&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kyverno&lt;/code&gt; can work together and successfully verify signatures and match them against the policy.
Now it is time for the reverse test. Start a compliant container image in a pod.
There won’t be any output for you to see.&lt;/p&gt;

&lt;p&gt;If you check the logs on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kyverno&lt;/code&gt; deployment, you will find a message similar to the one below:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kyverno I1206 12:25:02.344950       1 cosign.go:92] cosign &quot;msg&quot;=&quot;verified image&quot; &quot;bundleVerified&quot;=true &quot;count&quot;=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;future-work&quot;&gt;Future Work&lt;/h1&gt;
&lt;p&gt;While it is nice to have an operational private deployment along with verification, it is important to realize that the approach presented in this post is no permanent solution. It comes with two huge problems:&lt;/p&gt;

&lt;p&gt;First, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kyverno&lt;/code&gt; was installed using a helm chart, a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;helm upgrade&lt;/code&gt; can undo the customizations.&lt;/p&gt;

&lt;p&gt;Second, a key rotation on any of the Sigstore components will cause Kyverno to be unable to verify signatures on artifacts that were signed using old keys. This is where TUF can help, and provide backwards compatibility.&lt;/p&gt;

&lt;p&gt;I shall try in the future to help with solving &lt;a href=&quot;https://github.com/kyverno/kyverno/issues/5165&quot;&gt;kyverno#5165&lt;/a&gt; and remedy this.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>This is a follow-up post to my previous writing on standing up a local Sigstore deployment.This post is quite technical and requires a firm understanding of how Sigstore and its components work.See the Sigstore project page for pointers for diving into the subject.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Standing up Sigstore locally</title>
        <id>https://flxw.de/standing-up-sigstore-locally.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/standing-up-sigstore-locally.html" />
        <published>2022-11-10T00:00:00+01:00</published>

        
          <updated>2022-12-01T11:55:57+01:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;In this post, I describe steps on how to stand up a Sigstore deployment on your Kubernetes cluster,
adding detail and background information where I feel that it is needed.
The post is aimed at the early adopter of the project who is roughly familiar with how Sigstore works internally.
If you follow right through to the end, you will have a working Sigstore deployment on your machine - 
usable in the same manner as you would a remote deployment.&lt;/p&gt;

&lt;p&gt;As usual, I stand on the shoulders of giants, as I have benefitted a lot from
&lt;a href=&quot;https://github.com/sigstore/scaffolding/blob/main/getting-started.md&quot;&gt;other&lt;/a&gt;
&lt;a href=&quot;https://sthw.decodebytes.sh/&quot;&gt;earlier&lt;/a&gt;
&lt;a href=&quot;https://blog.sigstore.dev/scaffolding-sigstore-e893eb962f22&quot;&gt;articles&lt;/a&gt; on this subject out there.
I hope that this updated version of a setup guide helps with getting up to speed with Sigstore quickly.&lt;/p&gt;

&lt;p&gt;All you need to follow along is a working Docker installation on your machine, and Internet connectivity.
Throughout the next steps, I will sometimes refer to files that aren’t printed out here.
You can find them in this repository: &lt;a href=&quot;https://github.com/flxw/sigstore-local-setup&quot;&gt;flxw/sigstore-local-setup&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;step-1-set-up-kind-and-ingress&quot;&gt;Step 1: Set up KinD and Ingress&lt;/h1&gt;
&lt;p&gt;Now, we set up our Kubernetes cluster, using kind.
I find it to be an awesome tool for quickly prototyping and testing clusters.
If you are unfamiliar with it, here’s the description from their &lt;a href=&quot;https://kind.sigs.k8s.io/&quot;&gt;website&lt;/a&gt;.
Kind is a shorthand for &lt;em&gt;Kubernetes in docker&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;kind is a tool for running local Kubernetes clusters using Docker container “nodes”.
kind was primarily designed for testing Kubernetes itself, but may be used for local development or CI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Along with the cluster, we shall also set up an nginx ingress, in line with the &lt;a href=&quot;https://kind.sigs.k8s.io/docs/user/ingress/#ingress-nginx&quot;&gt;official instructions&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;kind cosign ko &lt;span class=&quot;c&quot;&gt;# only for brew users ;)&lt;/span&gt;
kind create cluster &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; kind-for-helm &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kind-cluster-config.yaml
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note to Mac users:&lt;/strong&gt; * Make sure to have OpenSSL at version 1.1, LibreSSL 2.8.x can cause problems.&lt;/p&gt;

&lt;h1 id=&quot;step-2-install-sigstore&quot;&gt;Step 2: Install Sigstore&lt;/h1&gt;

&lt;p&gt;After checking that our cluster and ingress are ready, we can install the bulk of Sigstore via &lt;a href=&quot;https://helm.sh&quot;&gt;helm&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
helm repo add sigstore https://sigstore.github.io/helm-charts
helm upgrade &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; scaffold &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    sigstore/scaffold &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; sigstore &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--create-namespace&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--values&lt;/span&gt; scaffold.values.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scaffold&lt;/code&gt; chart bundles individual charts for most of the Sigstore services: fulcio, rekor, ctlog, trillian, and TUF with an underlying MySQL database.
Additionally, it generates all of the required signing keys as secrets, configmaps, services, and ingresses.&lt;/p&gt;

&lt;h1 id=&quot;step-3-certificate-chain-and-domains&quot;&gt;Step 3: Certificate chain and domains&lt;/h1&gt;
&lt;p&gt;To make Sigstore clients work with the cluster, you need to generate a chain of certificates with a self-signed root.
You then need to add the root certificate to your OS’s trust store.
Alternatively, you can work with independent certificates, but I find it easier to add only one certificate to the trust store.
Finally, you need to add four entries to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# create a self-signed CA certificate (add ca.cert.pem to trust store and configure explicit trust)&lt;/span&gt;
openssl req &lt;span class=&quot;nt&quot;&gt;-x509&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-newkey&lt;/span&gt; rsa:4096 &lt;span class=&quot;nt&quot;&gt;-keyout&lt;/span&gt; ca.private.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; ca.cert.pem &lt;span class=&quot;nt&quot;&gt;-sha256&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 365 &lt;span class=&quot;nt&quot;&gt;-nodes&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;service_name &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;rekor fulcio tuf&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$service_name&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;.cert.ext
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$service_name&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;.sigstore.local
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;    openssl req &lt;span class=&quot;nt&quot;&gt;-new&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-newkey&lt;/span&gt; rsa:4096 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-keyout&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$service_name&lt;/span&gt;.private.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$service_name&lt;/span&gt;.req.pem &lt;span class=&quot;nt&quot;&gt;-nodes&lt;/span&gt;

    openssl x509 &lt;span class=&quot;nt&quot;&gt;-req&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$service_name&lt;/span&gt;.req.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-days&lt;/span&gt; 365 &lt;span class=&quot;nt&quot;&gt;-CA&lt;/span&gt; ca.cert.pem &lt;span class=&quot;nt&quot;&gt;-CAkey&lt;/span&gt; ca.private.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-CAcreateserial&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$service_name&lt;/span&gt;.signed.cert.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;-extfile&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$service_name&lt;/span&gt;.cert.ext

    kubectl create secret tls &lt;span class=&quot;nv&quot;&gt;$service_name&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-tls&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$service_name&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-system&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--cert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$service_name&lt;/span&gt;.signed.cert.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$service_name&lt;/span&gt;.private.pem
&lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/hosts
127.0.0.1 fulcio.sigstore.local
127.0.0.1 rekor.sigstore.local 
127.0.0.1 tuf.sigstore.local
127.0.0.1 registry.local
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;step-4-cosign-initialization&quot;&gt;Step 4: Cosign initialization&lt;/h1&gt;
&lt;p&gt;Out of the box, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cosign&lt;/code&gt; is configured to work with the public infrastructure.
Hence, we need to tell it about the certificates used in our cluster.
To do that, tuf compiles a JSON file that needs to be extracted from the cluster.
It only needs to be used once for every initialization.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
kubectl &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; tuf-system get secrets tuf-root &lt;span class=&quot;nt&quot;&gt;-ojsonpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;{.data.root}&apos;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    | &lt;span class=&quot;nb&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; root.json
cosign initialize &lt;span class=&quot;nt&quot;&gt;--root&lt;/span&gt; root.json &lt;span class=&quot;nt&quot;&gt;--mirror&lt;/span&gt; https://tuf.sigstore.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;step-5-test&quot;&gt;Step 5: Test&lt;/h1&gt;

&lt;p&gt;From now on, it’s just testing and enjoying what you have built. :)
In our test, we shall put a container into a locally running registry and sign it.
Afterward, we shall verify it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# First, we&apos;ll spin up the local registry&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5000:5000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; registry.local &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    registry:2

&lt;span class=&quot;c&quot;&gt;# Second, a test container is created&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Make sure you have go installed for this&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KO_DOCKER_REPO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;registry.local:5000/sigstore
&lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mktemp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
go mod init example.com/demo
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; main.go
package main
import &quot;fmt&quot;
func main() {
   fmt.Println(&quot;hello world&quot;)
}
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ko publish &lt;span class=&quot;nt&quot;&gt;-B&lt;/span&gt; example.com/demo&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Created image &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$IMAGE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;popd&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Third, we shall sign the container&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;REKOR_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://rekor.sigstore.local
&lt;span class=&quot;nv&quot;&gt;FULCIO_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://fulcio.sigstore.local
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;COSIGN_EXPERIMENTAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1

&lt;span class=&quot;c&quot;&gt;# add --verbose if you are curious ;)&lt;/span&gt;
cosign sign &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--fulcio-url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FULCIO_URL&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--rekor-url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REKOR_URL&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--allow-insecure-registry&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$IMAGE&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Fourth and last - signature verification!&lt;/span&gt;
cosign verify &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--allow-insecure-registry&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--rekor-url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://rekor.sigstore.local &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$IMAGE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Congratulations - you have now mastered the deployment of Sigstore on your machine!
Running such a setup in production is a bit more complex,
and we are currently hard at work documenting the efforts involved.
If you’re curious about what’s next and how to help, read on in the next section.&lt;/p&gt;

&lt;h1 id=&quot;getting-involved&quot;&gt;Getting involved&lt;/h1&gt;
&lt;p&gt;This is the shortest and fastest way to set up Sigstore I know - until now!
The Sigstore project is just getting started, and there are tons of ways to &lt;a href=&quot;https://docs.sigstore.dev/contributing&quot;&gt;contribute&lt;/a&gt;.
You can meet me and many others in the Sigstore Slack channel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private-sigstore-users&lt;/code&gt;, putting together a manual for operating a deployment for a longer duration.&lt;/p&gt;

&lt;p&gt;This is a living document, and I’ll edit it in the future to include DEX as an OIDC token forwarder.&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>In this post, I describe steps on how to stand up a Sigstore deployment on your Kubernetes cluster,adding detail and background information where I feel that it is needed.The post is aimed at the early adopter of the project who is roughly familiar with how Sigstore works internally.If you follow right through to the end, you will have a working Sigstore deployment on your machine - usable in the same manner as you would a remote deployment.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Oneliner: External secret decoding</title>
        <id>https://flxw.de/external-secret-encoding.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/external-secret-encoding.html" />
        <published>2022-11-04T00:00:00+01:00</published>

        
          <updated>2022-11-04T17:34:47+01:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;If you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external-secrets&lt;/code&gt; to sync secrets from some a key management
system like AWS KMS or Vault into your cluster,
you have become familiar with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; object introduced by it.&lt;/p&gt;

&lt;p&gt;In case you want to sync a secret that has multiple lines,
you need to encode the secret &lt;em&gt;inside&lt;/em&gt; your KMS,
and decode it inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExternalSecret&lt;/code&gt; using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decodingStrategy&lt;/code&gt;.
The values will be base64-encoded again by k8s when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Secret&lt;/code&gt; gets created.&lt;/p&gt;

&lt;p&gt;An example would as follows (taken from &lt;a href=&quot;https://external-secrets.io/v0.6.1/guides/decoding-strategy/&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KMS secret value: aGFwcHkgc3RyZWV0
ExternalSecret decodes it: happy street
k8s Secret data: aGFwcHkgc3RyZWV0
Application reads: happy street
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please see the following object definition for a complete definition:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;external-secrets.io/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ExternalSecret&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your-access-credentials&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;refreshInterval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1m&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;secretStoreRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cluster-secrets-store&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterSecretStore&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your-access-credentials&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dataFrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;svc/app/secret&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;decodingStrategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Base64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the colon that seperates the filepaths in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KUBECONFIG&lt;/code&gt; - you can pass in more than one file.&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>If you use external-secrets to sync secrets from some a key managementsystem like AWS KMS or Vault into your cluster,you have become familiar with the ExternalSecret object introduced by it.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>No silver bullet: Cloud computing</title>
        <id>https://flxw.de/cloud-computing-isnt-the-silver-bullet.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/cloud-computing-isnt-the-silver-bullet.html" />
        <published>2022-11-03T00:00:00+01:00</published>

        
          <updated>2022-11-03T10:08:22+01:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;As companies re-evaluate their supply chains, they tend to turn a blind eye
on partially massive vendor lock-ins with their cloud providers.
Here’s a great post from a company that had their product in the cloud,
and is moving it back into their own data center now:&lt;/p&gt;

&lt;p&gt;[https://world.hey.com/dhh/why-we-re-leaving-the-cloud-654b47e0]&lt;/p&gt;

&lt;p&gt;I award bonus points for thinking about power distribution on the Internet :)&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>As companies re-evaluate their supply chains, they tend to turn a blind eyeon partially massive vendor lock-ins with their cloud providers.Here’s a great post from a company that had their product in the cloud,and is moving it back into their own data center now:</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Codeberg</title>
        <id>https://flxw.de/codeberg-a-github-alternative-from-europe.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/codeberg-a-github-alternative-from-europe.html" />
        <published>2022-10-25T00:00:00+02:00</published>

        
          <updated>2022-10-25T21:47:03+02:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;When I started getting into computers in 2010, GitHub was not yet owned by Microsoft,
and had several contenders:
self-hosted gits, SourceForge, SVN and especially Gitorious.
I remember really liking Gitorious.&lt;/p&gt;

&lt;p&gt;Well, that was over ten years ago, and now git and GitHub reign supreme.
GitLab is the notable exception.&lt;/p&gt;

&lt;p&gt;I was very excited to learn that an alternative to GitHub is forming on my continent - Europe!
It’s called &lt;a href=&quot;https://codeberg.org&quot;&gt;Codeberg&lt;/a&gt;.
I found it via &lt;a href=&quot;https://ruky.me/2022/10/17/codeberg-a-github-alternative-from-europe/&quot;&gt;this blog post&lt;/a&gt;,
and immediately created an &lt;a href=&quot;https://codeberg.org/flxw&quot;&gt;account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the wake of how GitHub handled OSS licenses with Copilot,
I will start exploring the platform in the next weeks and write about it.&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>When I started getting into computers in 2010, GitHub was not yet owned by Microsoft,and had several contenders:self-hosted gits, SourceForge, SVN and especially Gitorious.I remember really liking Gitorious.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Oneliner: Merge kubectl configs</title>
        <id>https://flxw.de/merge-kube-configurations.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/merge-kube-configurations.html" />
        <published>2022-10-14T00:00:00+02:00</published>

        
          <updated>2022-11-04T17:34:47+01:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;Today’s oneliner is for merging two kubectl configuration files into one.
This can be useful when creating new clusters and exchanging small config files with your colleagues:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBECONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/.kube/config.old:~/cluster
&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; ~/.kube/config ~/.kube/config.old
kubectl config view &lt;span class=&quot;nt&quot;&gt;--flatten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/.kube/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the colon that seperates the filepaths in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KUBECONFIG&lt;/code&gt; - you can pass in more than one file.&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>Today’s oneliner is for merging two kubectl configuration files into one.This can be useful when creating new clusters and exchanging small config files with your colleagues:</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>What the patch?!</title>
        <id>https://flxw.de/what-the-patch.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/what-the-patch.html" />
        <published>2021-06-16T00:00:00+02:00</published>

        
          <updated>2022-10-22T15:52:11+02:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;At work I deal with Kubernetes and kustomize on a daily basis.
Today I have pulled my hair about how I could patch a value in a job that was included in the base kustomization.
I knew that there were several ways to do it, and I realized that I could not tell the difference between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patches&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patchesJson6902&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patchesStrategicMerge&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It turns out that the three directives can be regarded as variations of the same patching mechanism.
They differ in terms of customizability, and hence the number of things you can do (and break) with them.
To me, the hierarchy feels as follows, starting with the least versatile and powerful directive:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patchesStrategicMerge&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patchesJson6902&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patches&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Why is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patchesStrategicMerge&lt;/code&gt; the least powerful and versatile?
Because it’s simple! Try to use it, the reviewers will be thankful.&lt;/p&gt;

&lt;p&gt;Check the &lt;a href=&quot;https://github.com/kubernetes-sigs/cli-experimental/blob/e8661e62fbff9bb41703e663c5d6f9730f121a16/site/content/en/references/kustomize/kustomization/patchesStrategicMerge/_index.md&quot;&gt;documentation here&lt;/a&gt;.
It tells us that &lt;em&gt;each patch should be either a relative file path or an inline content resolving to a partial or complete resource definition&lt;/em&gt;. 
That means these patches do what we are used to from git, for example. 
They patch a single thing, so are ideal for correcting environment variables, names, paths, and the likes.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It turns out that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patchJson6902&lt;/code&gt; directive is an older keyword, that must also target a specific resource,
but can deliver more complex operations on the patch target.
These operations are specified in the JSON6902 format, hence the name.
The actual patch is delivered via JSON (but can also be YAML), for instance like below.
More examples can be found in the &lt;a href=&quot;https://github.com/kubernetes-sigs/cli-experimental/blob/e8661e62fbff9bb41703e663c5d6f9730f121a16/site/content/en/references/kustomize/kustomization/patchesjson6902/_index.md&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;op&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;remove&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/spec/template/spec/containers/0/env/0/valueFrom&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;op&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/spec/template/spec/containers/0/env/0/value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SOMEVALUE&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patches&lt;/code&gt; directive is the new shiny swiss army knife.
It needs a target, too, but the target can be a &lt;em&gt;regex&lt;/em&gt;.
The patch instructions are delivered in the JSON6902 format introduced above.
In short, this directive allows you to patch multiple targets using complex operations all in a single directive.
Truly powerful, and truly tricky to review.
You can find the &lt;a href=&quot;https://github.com/kubernetes-sigs/cli-experimental/blob/e8661e62fbff9bb41703e663c5d6f9730f121a16/site/content/en/references/kustomize/kustomization/patches/_index.md&quot;&gt;whole documention for this directive here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sources&quot;&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/kubernetes-sigs/kustomize/issues/2705&lt;/li&gt;
  &lt;li&gt;https://stackoverflow.com/questions/63604579/what-is-the-difference-between-patches-vs-patchesjson6902-in-kustomize&lt;/li&gt;
&lt;/ul&gt;

          
          
        
      
        </content>

        
          <summary>At work I deal with Kubernetes and kustomize on a daily basis.Today I have pulled my hair about how I could patch a value in a job that was included in the base kustomization.I knew that there were several ways to do it, and I realized that I could not tell the difference between patches, patchesJson6902 and patchesStrategicMerge.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>A beancount tutorial and framework</title>
        <id>https://flxw.de/a-beancount-tutorial-and-framework.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/a-beancount-tutorial-and-framework.html" />
        <published>2021-02-28T00:00:00+01:00</published>

        
          <updated>2022-10-22T15:52:11+02:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;As a financially avid reader, I am sure that you can roughly say how much money you need for a month.
You can assist your gut feeling with tools like Kmymoney, Homebank, GnuCash et al. to know exactly how much it is that you spend and earn per month.
However, the aforementioned tools have a common shortcoming, at least in my opinion:
They use different data formats to store data.
If the software reaches end of life, you could lose months or even years of transactional data because you might not be able to extract it from the old storage format.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;https://plaintextaccounting.org/&quot;&gt;Plain Text Accounting&lt;/a&gt; (PTA).
A text file will store your transactions using a well-defined format.
No matter what happens to the analytics software, you will always be able to manipulate and convert from text - solving the problem above.&lt;/p&gt;

&lt;p&gt;PTA tools tend to be designed for the command line, which can be somewhat counter-intuitive if you expect graphs and visualizations of the GUI tools.
In this article I will show you how to easily work with &lt;a href=&quot;https://beancount.github.io/&quot;&gt;beancount&lt;/a&gt; and visualize your numbers nicely.&lt;/p&gt;

&lt;h1 id=&quot;directory-setup&quot;&gt;Directory setup&lt;/h1&gt;
&lt;p&gt;First, you install &lt;a href=&quot;https://beancount.github.io/&quot;&gt;beancount&lt;/a&gt; from any source that works for your system.&lt;/p&gt;

&lt;p&gt;Second, create a file and folder structure like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;importers/
raw/
main.beancount
import.config&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Third, open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.beancount&lt;/code&gt; and open some accounts. You can use &lt;a href=&quot;https://docs.google.com/document/d/1Tss0IEzEyAPuKSGeNsfNgb0BfiW2ZHyP5nCFBW1uWlk&quot;&gt;this article&lt;/a&gt; as a guide. It doesn’t have to be perfect from the start, you can always retry.&lt;/p&gt;

&lt;p&gt;Fourth, create folders for your bank accounts inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raw&lt;/code&gt; and create empty beanfiles for them.&lt;/p&gt;

&lt;p&gt;Fifth, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; command inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.beancount&lt;/code&gt; to pull in the account-specific beanfiles your just created.&lt;/p&gt;

&lt;p&gt;If you’re like me, you have two accounts where money shuttle back and forth. Then you would have a folder structure similar to the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;import.config
importers/
main.beancount
n26.beancount
sparkasse.beancount
raw
 ├── N26
 └── Sparkasse               &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;importer-setup&quot;&gt;Importer setup&lt;/h1&gt;
&lt;p&gt;As mentioned in the introduction, I perceive the big strength of PTA that you can process anything.
For this job, beancount offers a so-called &lt;a href=&quot;https://beancount.github.io/docs/importing_external_data.html#example-importers&quot;&gt;Importer API&lt;/a&gt;.
You can either write your own Python importer or copy and expand on one from Github.
I used the following two in my projects:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://gitlab.hasi.it/seth/beancount-csv-camt&lt;/li&gt;
  &lt;li&gt;https://github.com/siddhantgoel/beancount-n26&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Either install the importer via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; or make it importable for Python from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;importers/&lt;/code&gt; directory.
It will process your input files line-by-line and create the appropriate accountin entries.&lt;/p&gt;

&lt;p&gt;After having found and configured an importer, you can wire it up quite easily in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import.config&lt;/code&gt;. Here is how it looks for me:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; 

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;importers.n26&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N26Importer&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;importers.csv_camt&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CsvCamtImporter&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;CONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;N26Importer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;XXXXXXMYIBANXXXXXXXXX&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;Assets:N26&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;de&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;file_encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;utf-8&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CsvCamtImporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;XXXXXXMYIBAN2XXXXXXXX&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&apos;Assets:Sparkasse&apos;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This tells beancount the following:
“Please use these two importers when importing transactions.
The importers will tell you whether they are capable of importing a given file, so the right one will get selected automatically.”&lt;/p&gt;

&lt;h1 id=&quot;data-ingestion&quot;&gt;Data ingestion&lt;/h1&gt;
&lt;p&gt;A month has passed while you tried to set this up, so now you have a month’s worth of data ;-)&lt;/p&gt;

&lt;p&gt;Download it as CSV, and save it under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raw/n26-01-21.csv&lt;/code&gt;.
Then, you can append the plain text ledger to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n26.beancount&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;bean-extract import.config raw/n26-01-21.csv &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n26.beancount&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I recommend checking the output in the beginning, as categories could be wrong. Maybe you notice some patterns that can help you automatically categorize transactions inside the importer. I did that and it saves quite a bit of work.&lt;/p&gt;

&lt;h1 id=&quot;data-visualization&quot;&gt;Data visualization&lt;/h1&gt;
&lt;p&gt;Here is why I picked beancount: &lt;a href=&quot;https://beancount.github.io/fava/&quot;&gt;fava&lt;/a&gt;.
It’s a great visualization frontend for beancount ledgers. After adding a month’s worth of data, I just fire it up and can analyze what happened.&lt;/p&gt;

&lt;p&gt;If you’d like to do so, too, simply install it and run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;fava main.beancount&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

          
          
        
      
        </content>

        
          <summary>As a financially avid reader, I am sure that you can roughly say how much money you need for a month.You can assist your gut feeling with tools like Kmymoney, Homebank, GnuCash et al. to know exactly how much it is that you spend and earn per month.However, the aforementioned tools have a common shortcoming, at least in my opinion:They use different data formats to store data.If the software reaches end of life, you could lose months or even years of transactional data because you might not be able to extract it from the old storage format.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Tracking your money made easy</title>
        <id>https://flxw.de/tracking-finances-made-easy.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/tracking-finances-made-easy.html" />
        <published>2020-12-26T00:00:00+01:00</published>

        
          <updated>2022-10-25T09:43:01+02:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;A couple of years ago, I started getting more and more into understanding how the financial system works,
what inflation is, what the central banks do, etc, pp.
Finally I ended getting a lot more thorough in terms of looking into where my money and time goes.
I would like to highlight the account structure and the two tools I have been using every since in this article.
I believe that the whole setup is fairly simple and can be used by anybody, so I would like to share it.
For every piece of the two-part system, I will first give a general description and then a bit of detail how I do it.&lt;/p&gt;

&lt;p&gt;It is based on a few assumptions:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;You got one or more bank accounts that you use mainly for spending.&lt;/li&gt;
  &lt;li&gt;It is possible to export the transactions from these accounts as CSV&lt;/li&gt;
  &lt;li&gt;The saved money goes onto the security accounts for later investing or just storage&lt;/li&gt;
  &lt;li&gt;You have one or more security accounts and checking accounts associated with them, and these accounts are only used for buying/selling securities&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What comes out of this is what I call a cashflow system.
If you have read Robert Kiyosakis &lt;em&gt;Rich Dad, Poor Dad&lt;/em&gt;, you know what I am referring to.
If not or you need a refresher, just google &lt;em&gt;Cashflow Quadrant&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-a-cashflow-system-could-look-like&quot;&gt;What a cashflow system could look like&lt;/h1&gt;
&lt;p&gt;What I described in general terms above looks like this for me:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/cashflow-system.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The income goes to an account that I refer to as &lt;em&gt;reserve account&lt;/em&gt;.
It always holds 2-3 salaries that should only be touched as a last resort, e.g. when I lose my job or something serious happens.
The &lt;em&gt;reserve&lt;/em&gt; feeds money onto my &lt;em&gt;budget account&lt;/em&gt; for daily expenses on a monthly basis.
What’s left of the income goes onto the deposit account for later investing.&lt;/p&gt;

&lt;p&gt;Generally speaking, there are two categories here: spending and investing.&lt;br /&gt;
&lt;strong&gt;Category I&lt;/strong&gt; is about spending. There will be high volume of spendtransactions, because I like to have every penny tracked and pay as little as possible with cash.
That’s also why the CSV export is so important - you do not want to enter this by hand.
This will be covered in the first part.&lt;br /&gt;
&lt;strong&gt;Category II&lt;/strong&gt; is about tracking your net worth. It’s separate because it is irrelevant for spend analysis and the volume of transactions is comparably small.
It will be covered in the second part.&lt;/p&gt;

&lt;h1 id=&quot;step-1-spend-analysis&quot;&gt;Step 1: Spend analysis&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The tool:&lt;/strong&gt;
With &lt;a href=&quot;https://kmymoney.org/&quot;&gt;kmymoney&lt;/a&gt;, it is possible to analyze your transactions in detail and categorize them easily.
Why am I recommending this instead of moneydance, homebank, lime and all the others?
Simple: CSV IMPORT AND MULTIPLE ACCOUNTS! These are simple but vital features that save you time and headache :)
You can even track securities and investments in kmymoney but I wouldn’t recommend doing so.&lt;/p&gt;

&lt;p&gt;Just import your CSV exports from your spending accounts there, enter the categories for the transactions and reconcile the amounts.
Then you can directly analyze your spend.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How I use it:&lt;/strong&gt;
At the end of every month, I save the CSV exports from the accounts on my machine and import them into kmymoney.
After checking the categories and reconciling the final account balances, I can check the analysis.
What’s especially important to me is the savings rate, i.e. how much of my income was not spent.&lt;/p&gt;

&lt;p&gt;Tip #1: Do not delete the exports. They contain nice data that you can use to migrate to a different software later and keep all history.&lt;br /&gt;
Tip #2: Have the categorization done by your bank, this is why I went with N26 a few years ago.&lt;/p&gt;

&lt;p&gt;I have recently begun to explore &lt;a href=&quot;http://furius.ca/beancount/&quot;&gt;beancount&lt;/a&gt; as an alternative because the work of reconciliating accounts and transactions between my accounts became too monotonous.
In combination with &lt;a href=&quot;https://beancount.github.io/fava/&quot;&gt;Fava&lt;/a&gt;, the UI is quite nice.
It allows me to automate the whole CSV processing without needing to reconciliate a few transactions that went onto the wrong account.
The setup is very time-consuming though, so I will always recommend &lt;em&gt;kmymoney&lt;/em&gt; first.&lt;/p&gt;

&lt;h1 id=&quot;step-2-security-analysis&quot;&gt;Step 2: Security analysis&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The tool:&lt;/strong&gt;
Now that you know your savings rate and main cost drivers, you can think about what you want to do with the rest of the money.
Most likely you will buy something instead of leaving the money on some account, having it succumb to inflation.
I found &lt;a href=&quot;https://www.portfolio-performance.info/&quot;&gt;Portfolio Performance&lt;/a&gt; to be super easy to use and have very useful features.
The best is arguable the auto-update of stock prices - nowhere else have I seen it this easy.&lt;/p&gt;

&lt;p&gt;To track something, just enter the price, fees and taxes associated with your transaction.
That’s why the expected low volume of transactions mentioned above is key for this approach.
The nice thing is that you needn’t track stocks.
The software allows you to create any category, so you could also see your worth in houses or cars.
Anything that’s not on the budget or reserve accounts should be in here.&lt;/p&gt;

&lt;p&gt;Just download the software.
There are example files included that give you an idea of what you could do or track with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How I use it:&lt;/strong&gt;
After setting up the spend analysis, I put in the security transactions for the month.
Portfolio Performance allows me to easily check my asset allocation, so I can rebalance or adjust if necessary.&lt;/p&gt;

&lt;h1 id=&quot;verdict&quot;&gt;Verdict&lt;/h1&gt;
&lt;p&gt;This article showed you how to structure your accounts into income/expense accounts and the tools to track accordingly.
What is a flaw, in my opinion, is that there is never a complete picture of your accounts.
Portfolio performance doesn’t know about the expenses in kmymoney and vice versa.&lt;/p&gt;

&lt;p&gt;I do not believe that this is a huge problem, however.
If you look at it, there should only ever be 2-4 months of salary inside the spend analysis.
The majority of your money should be somewhere in the security analysis.
With the level of transparency that you get here, I believe that it is a small price to always add 3x your salary onto the number that Portfolio Performance gives you.&lt;/p&gt;

&lt;p&gt;Thanks for reading the first post since five years!
If you have any comments, please reach out to me via the contact details on the landing page!&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>A couple of years ago, I started getting more and more into understanding how the financial system works,what inflation is, what the central banks do, etc, pp.Finally I ended getting a lot more thorough in terms of looking into where my money and time goes.I would like to highlight the account structure and the two tools I have been using every since in this article.I believe that the whole setup is fairly simple and can be used by anybody, so I would like to share it.For every piece of the two-part system, I will first give a general description and then a bit of detail how I do it.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Upgrading Guide: v1.1.0</title>
        <id>https://flxw.de/upgrading-guide-v1.1.0.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/upgrading-guide-v1.1.0.html" />
        <published>2017-01-07T00:00:00+01:00</published>

        
          <updated>2022-10-22T15:05:10+02:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;There’re some significant changes in update v1.1.0, action required after you upgrade Almace Scaffolding.&lt;/p&gt;

&lt;p&gt;In your front-matter fields:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replace all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg-headline&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;img-headline&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heading-img&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Replace all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg-headline-width&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;img-headline-width&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heading-img-width&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Remove all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg-headline-height&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;img-headline-height&lt;/code&gt; as they’re deprecated and no longer available.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heading-img-local: true&lt;/code&gt; if images are stored right inside your project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check the following front-matter data for post thumbnails:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replace all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thumb&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thumbnail&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thumb/&lt;/code&gt; prefix to your filename, ie. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thumbnail: thumb/my-post.png&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thumbnail-local: true&lt;/code&gt; if thumbnails are stored right inside your project.&lt;/li&gt;
&lt;/ul&gt;

          
          
        
      
        </content>

        
          <summary>There’re some significant changes in update v1.1.0, action required after you upgrade Almace Scaffolding.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Why I am done with smart watches</title>
        <id>https://flxw.de/why-i-am-done-with-smartwatches.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/why-i-am-done-with-smartwatches.html" />
        <published>2015-11-15T00:00:00+01:00</published>

        
          <updated>2022-10-22T15:05:10+02:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;It is a thing more and more common. People casually chatting, operating their
various electronic devices simultaneously. When was the last time that you felt you had
the full attention of someone? It probably wasn’t when they were caressing their
touchscreens with their fingertips. This is an essay on conversational
quality and smart devices making us dumber. Dump your smartwatch.&lt;/p&gt;

&lt;p&gt;As a technolgically affine person, I was naturally amazed by the possibility to
wear a computer on my wrist! It was October in the year 2014 and Motorola was about to
release their super-hyped smartwatch &lt;em&gt;Moto 360&lt;/em&gt;. It was shown at Google I/O 2014 and reception
was spectacular. The same momentum has built up for its &lt;a href=&quot;http://www.wareable.com/smartwatches/motorola-moto-360-2-release-date-price-specs-725&quot;&gt;successor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And so, I found a Moto 360 special edition under the christmas tree. One
of the most beautiful smartwatches ever. And from there on, amazement went downhill.&lt;/p&gt;

&lt;h2 id=&quot;tilt-sensors&quot;&gt;Tilt sensors&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;To activate their displays, most smartwatches (including the Apple Watch)
rely on tilt sensors. This helps them save battery.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, but who flicks their wrist in an awkwardly strong motion to know the time?
Just right - no one. Only die-hard Apple fans are portraying awkward movements to
pay tribute to their timepiece.
Every watchwearer just takes a short &lt;em&gt;glance&lt;/em&gt; at their timepiece,
and will never &lt;em&gt;stare&lt;/em&gt; at their wrist hard.&lt;/p&gt;

&lt;h2 id=&quot;power-and-stability&quot;&gt;Power and stability&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;“Excuse me, may I ask you for the time?”&lt;/em&gt;&lt;br /&gt;
  &lt;em&gt;“Give me a few minutes, my watch just crashed.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not a joke, this first-world-problem happened to me more than once.
Sitting on my wrist, doing nothing all day, the small computer
is so surprised at being needed that it instantly flips a bit.
Since UIs for watches have never been developed, it is no wonder that
there is lacking feedback. Oh, and of course one should never
forget to recharge it in the evening, if one does not want to wear
a very expensive bracelet the next afternoon.&lt;/p&gt;

&lt;h1 id=&quot;real-world-integration&quot;&gt;Real world integration&lt;/h1&gt;
&lt;p&gt;In all the promotion, life with a smartwatch is supposed to be made easier in the real world.
Contactless payment, calls, etc. All the lot that takes time off our hands.
Yet, there are few apps for smartwatches that give you a hand in reallife.
One example would be the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.hole19golf.hole19.beta&quot;&gt;Hole19 golf score tracker&lt;/a&gt;.
The app is great, but the score counter for the watch made me feel clunkier than
ever on the course.&lt;/p&gt;

&lt;p&gt;Another example would be the &lt;a href=&quot;https://play.google.com/store/apps/details?id=de.stocard.stocard&quot;&gt;Stocards app&lt;/a&gt;,
an application for slimming your wallet by digitizing benefit/award cards.
The app for the phone is again: great. Even the Android Wear implementation
is straightforward but: No supermarket I have been to has had scanners able to read the
tiny barcode off the screen. Bummer.&lt;/p&gt;

&lt;h2 id=&quot;notification-barrages&quot;&gt;Notification barrages&lt;/h2&gt;
&lt;p&gt;Our phone is abuzz with notifications from the happenings of almost any social network that we are part of.
And all this buzz will make your wrist ring with delight. A message here,
an email there, a calendar reminder, etc. Anything that your phone can tell you will now
sit at your wrist. &lt;em&gt;Awesome&lt;/em&gt;, you may think, and this is the exact reason for which I bought my
smartwatch.&lt;/p&gt;

&lt;p&gt;Imagine you have just received a message. You glance at your watch, be it right after the watch
buzzed, or anytime after. Chances are that you will read it. Now you have the information at
the top of your head, and what you have done previosly has already been interrupted by this context
switch. Will you respond to the message?&lt;/p&gt;

&lt;h2 id=&quot;on-conversational-quality&quot;&gt;On conversational quality&lt;/h2&gt;
&lt;p&gt;You will very likely respond, since you are thinking about it anyway.
The phone is only a flick of the wrist away and there you are:
Having completely abandoned what you were doing, mentally
enslaved by your minds wish to wander to easy tasks.
You are serving your watch. A watch that is not even serving you,
it is not even collecting any useful health data.
The world might not have caught up with wearable technology yet - until now
it is simply not worth it.&lt;/p&gt;

&lt;p&gt;It is no wonder that more and more dystopic versions of communications technolgy
are produced by artists. Take a look at this very popular
&lt;a href=&quot;http://antoinegeiger.com/filter/photo/SUR-FAKE&quot;&gt;photo series&lt;/a&gt; by Antoine Geiger.
You will probably see yourself in one of those pictures.&lt;/p&gt;

&lt;p&gt;Even advertising has found this to be worthy a topic. It makes me feel guilty.
Does it make you feel the same?&lt;/p&gt;

&lt;p&gt;There are numerous studies out there that will prove that emotional bonding
and conversational variety will strongly decrease with smartphones on the table.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Look it up now, this article will still be here when you come back.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Living without those devices has become impossible in our professional world.
I will not suggest you to go and drop all your tech in a bin and light a campfire.
I want to raise awareness for your human surroundings and the richness of
exchange that you are missing because of coldly lit displays.&lt;/p&gt;

&lt;p&gt;Now put away the device with which you read this and say hello to the person next to you,
even if it is a stranger. Conversation is beautiful, most notably if it shall not serve
a higher purpose.&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>It is a thing more and more common. People casually chatting, operating theirvarious electronic devices simultaneously. When was the last time that you felt you hadthe full attention of someone? It probably wasn’t when they were caressing theirtouchscreens with their fingertips. This is an essay on conversationalquality and smart devices making us dumber. Dump your smartwatch.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Excel Analysis with HANA data</title>
        <id>https://flxw.de/setting-up-ms-office-excel-analysis-with-HANA.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/setting-up-ms-office-excel-analysis-with-HANA.html" />
        <published>2015-09-25T00:00:00+02:00</published>

        
          <updated>2022-10-22T15:52:11+02:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;Here at my SAP internship, I want to connect Analysis for Excel with
SAP HANA. Unfortunately, this fairly simple procedure is the ultimate example for
bad documentation, and I want to note down my approach here for getting it to work.&lt;/p&gt;

&lt;p&gt;The following is for Analysis for Excel versions &lt;strong&gt;2.0 and greater&lt;/strong&gt; (&lt;a href=&quot;http://scn.sap.com/docs/DOC-63785&quot;&gt;why&lt;/a&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure Analysis for Excel is up to date. An obvious step but you don&apos;t want any version conflicts after having it set up.&lt;/li&gt;
&lt;li&gt;Install the &lt;em&gt;HANA Client for Excel&lt;/em&gt; from &lt;a href=&quot;https://support.sap.com/software/installations.html&quot;&gt;here&lt;/a&gt; (Click &lt;em&gt;Search for Software&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Grant your database user the required privileges for accessing HANA via Excel through HTTP (&lt;a href=&quot;http://scn.sap.com/community/businessobjects-analysis-ms-office/blog&quot;&gt;why&lt;/a&gt;)

&lt;ol&gt;
&lt;li&gt;Import the delivery unit &lt;em&gt;AHCO_INA_SERVICE.tgz&lt;/em&gt; from the server&lt;/li&gt;
&lt;li&gt;Add the &lt;em&gt;INA_USER&lt;/em&gt; role to your user under the &lt;em&gt;granted roles&lt;/em&gt; section&lt;/li&gt;
&lt;li&gt;Add the object privileges &lt;em&gt;_SYS_BI&lt;/em&gt;, &lt;em&gt;_SYS_BIC&lt;/em&gt; and &lt;em&gt;_SYS_RT&lt;/em&gt; to your user and enable the &lt;em&gt;SELECT&lt;/em&gt; checkbox for those&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Open Analysis for Excel (&lt;a href=&quot;http://scn.sap.com/docs/DOC-63784&quot;&gt;see images&lt;/a&gt;)

&lt;ol&gt;
&lt;li&gt;Click the &lt;em&gt;Analysis&lt;/em&gt; tab&lt;/li&gt;
&lt;li&gt;Hit the &lt;em&gt;Insert Data Source&lt;/em&gt; and &lt;em&gt;Select Data Source...&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Right-click inside the selection menu, and &lt;em&gt;Create new SAP HANA connection...&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Enter your credentials and the selection menu for views should pop up&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

          
          
        
      
        </content>

        
          <summary>Here at my SAP internship, I want to connect Analysis for Excel withSAP HANA. Unfortunately, this fairly simple procedure is the ultimate example forbad documentation, and I want to note down my approach here for getting it to work.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Vision for wearable device apps</title>
        <id>https://flxw.de/my-vision-on-wearables.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/my-vision-on-wearables.html" />
        <published>2015-09-11T00:00:00+02:00</published>

        
          <updated>2022-10-25T09:43:01+02:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;Having looked at wearables intensively for several weeks, I want to share my vision
of how they should be developed further. Being mere data displays until now, wearable technology
has the potential to be so much more. Making data actionable is what I am talking about.&lt;/p&gt;

&lt;p&gt;Wearables I have looked at include: Withings Ox, Fitbits Charge HR, Motorolas Moto 360
and the Misfit Shine. All of these feature step and sleeptracking capabilities
and have accompanying feature-rich applications doing a good job at
visualizing the collected data.&lt;/p&gt;

&lt;p&gt;Just take a look at the gorgeous graph web-based Google Fit draws for
my step data (as of September 2015):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/wearables-walk-stat.png&quot; alt=&quot;Google Fit walking statistics&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The data displayed is very clear. It displays how many steps I have made
each day within a week.
We can view a similar graph for the day before, the day before that,
the week before that, some months back and so on. We can
also view monthly statistics.&lt;/p&gt;

&lt;p&gt;Would we be able to derive actionable insights from the data? What use is six months worth
of data if you have no clue about how to read it? Does it deliver any value besides “Oh that is a lot”
or “oh that is not so much”? Machines are very good at deriving
patterns from great amounts of data - and I believe that this capability should be put to use.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Providing background information&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s have a look at this graph of sleep information.
It tells me when I experienced deep sleep and light sleep and when my body moved during sleeping.
Now I can see when I entered a different sleep phase. But what will I do with this information?
Can I improve my sleep based on this data? I &lt;em&gt;could&lt;/em&gt;, if I knew how.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Giving actionable advice&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I could make changes if I knew about basic sleep mechanisms and how behaviour before going to bed affects sleep.
Certainly no secret, the blue light emitted by electronic devices affects our sleep in a &lt;a href=&quot;http://www.health.harvard.edu/staying-healthy/blue-light-has-a-dark-side&quot;&gt;bad way&lt;/a&gt;.
Wouldn’t it be great if such an insight was shared with users of the app?&lt;/p&gt;

&lt;p&gt;I believe that the user should not have to have to analyze the data himself (although he should certainly have the possibility to do so),
but that analytics should give actionable advice, if it can be given. This way, a source
for information overload is reduced and the matter is only brought to our attention if
it is demanding. One possibility might be via simple Google Now Card:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/wearables-google-now-advice.png&quot; alt=&quot;Google Now Card sleep advice&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is already an app that does something in that direction. &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.urbandroid.sleep&quot;&gt;Sleep as Android&lt;/a&gt; gives recommendations on how to catch up on sleep deficit, although
these tips are standardized and not tailored to ones demands.&lt;/p&gt;

&lt;p&gt;If anyone of Misfit, Fitbit, Withings, Google or Motorola reads this: These devices are great!
Team up with some fitness experts and give your product an edge over the competition!
What makes a tracker really valuable is the data analytics, not the hardware. Take a look
at &lt;a href=&quot;http://freeletics.com&quot;&gt;Freeletics&lt;/a&gt; for example. They provide members with weekly tips and insights
in bodily functions and regeneration mechanics. This information could easily be reused in
your applications!&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>Having looked at wearables intensively for several weeks, I want to share my visionof how they should be developed further. Being mere data displays until now, wearable technologyhas the potential to be so much more. Making data actionable is what I am talking about.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Making nginx act as an SMTP relay</title>
        <id>https://flxw.de/nginx-smtp-relay.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/nginx-smtp-relay.html" />
        <published>2014-09-04T00:00:00+02:00</published>

        
          <updated>2022-10-22T15:05:10+02:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;To test an application out in the wild I had to host it on my server.
As it receives and processes email via SMTP, it needed access to port 25.&lt;/p&gt;

&lt;p&gt;I did not bother learning and installing some tool that makes sub-1000 ports
available to applications without superuser rights, and thus I made use
of nginx’ capabilities.&lt;/p&gt;

&lt;p&gt;Inside the main &lt;em&gt;nginx.conf&lt;/em&gt;, I added a section for email:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mail {
    # See sample authentication script at:
    # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript

    # auth_http localhost/auth.php;
    # pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;
    # imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;

    auth_http http://127.0.0.1/mail/auth;
    xclient off;
    proxy_pass_error_message on;

    server {
        listen     25;
        protocol   smtp;
        timeout    5s;
        proxy      on;
        xclient    off;
        smtp_auth  none;
        so_keepalive on;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each of the configurations for my sites are loaded as individual modules, like it is the case with Apache.
Inside the configuration that handles the default behaviour for the web server, the following route was established.
It tells the mail client where to find the SMTP server. This can also be equipped with more logic to make it act as a load balancer.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    location = /mail/auth {
            set $reply ERROR;

            if ($http_auth_smtp_to ~ flxw.de) {
                set $reply OK;
            }

            add_header Auth-Status OK;
            add_header Auth-Server 127.0.0.1;
            add_header Auth-Port 2525;
            add_header Auth-Wait 1;
            return 204;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally there is the configuration file for the web app itself.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream app.myapp.de {
    server 127.0.0.1:8080;
}

# the nginx server instance
server {
    listen 0.0.0.0:80;
    server_name myapp.flxw.de;
    access_log /var/log/nginx/myapp.mydomain.de.log;

    auth_basic  &quot;Restricted&quot;;
    auth_basic_user_file /etc/nginx/htpasswd;

    # pass the request to the node.js server with the correct headers and much more can be added, see nginx config options
    location / {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header X-NginX-Proxy true;

      proxy_pass http://myapp.mydomain.de/;
      proxy_redirect off;
    }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

          
          
        
      
        </content>

        
          <summary>To test an application out in the wild I had to host it on my server.As it receives and processes email via SMTP, it needed access to port 25.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Booting Windows 7+ from USB</title>
        <id>https://flxw.de/install-windows-7+-from-usb.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/install-windows-7+-from-usb.html" />
        <published>2014-05-27T00:00:00+02:00</published>

        
          <updated>2022-10-25T12:32:35+02:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;Everytime I try to install Windows from a USB stick, I forget a simple step
in making the stick bootable and another few minutes are wasted searching for the solution.
This is just a short note on how to get your USB-Stick set up for installing Windows from it.&lt;/p&gt;

&lt;p&gt;Read these few lines to save yourself some time:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fdisk /dev/sdb
&lt;span class=&quot;c&quot;&gt;# create a single new partition taking all the space on the stick&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# make it of type 7 (Windows/NTFS) and set its bootable flag&lt;/span&gt;
mkfs.ntfs &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /dev/sdb1
ms-sys &lt;span class=&quot;nt&quot;&gt;-7&lt;/span&gt; /dev/sdb
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /tmp/winiso
mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; loop winimage.iso /tmp/winiso
mount /dev/sdb1 /mnt/usb1
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rav&lt;/span&gt; /tmp/winiso/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /mnt/usb1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In case you do not have &lt;em&gt;ms-sys&lt;/em&gt; installed, you can get it from &lt;a href=&quot;http://ms-sys.sourceforge.net/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>Everytime I try to install Windows from a USB stick, I forget a simple stepin making the stick bootable and another few minutes are wasted searching for the solution.This is just a short note on how to get your USB-Stick set up for installing Windows from it.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Using a colorful terminal</title>
        <id>https://flxw.de/color-your-term.html</id>
        <link rel="alternate" type="text/html" href="https://flxw.de/color-your-term.html" />
        <published>2014-05-05T00:00:00+02:00</published>

        
          <updated>2022-10-22T15:05:10+02:00</updated>
        

        <author>
          <name>Felix Wolff</name>
          <uri>https://flxw.de/</uri>
          <email>wolff.felix@proton.me</email>
        </author>

        <content type="html" xml:base="https://flxw.de/">
          
            &lt;p&gt;An appeal to everyone to use colored terminals
and do their eyes a favor.&lt;/p&gt;

&lt;p&gt;Computer scientists do get their hands dirty - &lt;em&gt;true&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Computer scientists do use tools that probably only a small fraction
of the Internet users has ever heard of - &lt;em&gt;true&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But so do car  mechanics and just about every other engineer on this world.
And everyone of them is trying to use the best tools available to them,
or keep them in the best state possible.&lt;/p&gt;

&lt;p&gt;As the german saying goes - &lt;em&gt;an engineer is only as good as his tools&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So why are a lot of hackers still using &lt;strong&gt;black-and-white&lt;/strong&gt; terminals?
Emacs? Software from the 80s? Look at the time to which shells date back!&lt;/p&gt;

&lt;!-- A lot of concepts from the past are so tweaked by now that they *cry* for an overhaul! --&gt;

&lt;h2 id=&quot;do-yourself-a-favor-and-check-out-color-schemes&quot;&gt;do yourself a favor and check out color schemes&lt;/h2&gt;
&lt;p&gt;Your terminal emulator should be able to do more than black text on a white background.
Check out the list of color schemes below. I have tried them all over time and found them
to be more or less useful. Currently I am using &lt;em&gt;solarized&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://slinky.imukuppi.org/zenburn/&quot;&gt;zenburn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ethanschoonover.com/solarized&quot;&gt;solarized&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/w0ng/vim-hybrid&quot;&gt;hybrid.vim&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ChrisKempson/Tomorrow-Theme&quot;&gt;TomorrowNightEighties&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://color.smyck.org/&quot;&gt;Smyck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-a-shell-that-works-with-you&quot;&gt;use a shell that works with you&lt;/h2&gt;
&lt;p&gt;You use your shell daily. There are dozens of shells superior to bash
out there. &lt;em&gt;Use them&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Over the past, I have tested &lt;a href=&quot;http://zsh.org&quot;&gt;zsh&lt;/a&gt; and &lt;a href=&quot;http://fishshell.com&quot;&gt;fish&lt;/a&gt;.
The first allows you to get up to speed fairly quickly (in part due to the great documentation),
but the completion and directory naviagtion functionality is limited. I have come to love zsh for these features.
While its configuration looks like hell, it is very fast and powerful.&lt;/p&gt;

&lt;p&gt;The zsh community has begun the trend of the &lt;em&gt;Oh My Shell&lt;/em&gt; configuration collections.
They exist for both shells and allow you to get up to speed very quickly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;Oh My Zsh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bpinto/oh-my-fish&quot;&gt;Oh My Fish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;help-making-things-beautiful&quot;&gt;help making things beautiful&lt;/h2&gt;
&lt;p&gt;While these things certainly improve the current situation, new tools ought to be made.
There are lots of beautiful ideas out there, for improving terminals or shells.&lt;/p&gt;

&lt;p&gt;An idea I fancy especially is &lt;a href=&quot;http://finalterm.org/&quot;&gt;FinalTerm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Either way, everybody loves beautiful tools. So if you have an idea to improve,
or build an entirely new one - don’t hesitate! The worst thing that might happen is you learning something ;-)&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>An appeal to everyone to use colored terminalsand do their eyes a favor.</summary>
        
      </entry>
    
  
</feed>
